{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14520\viewh21000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Introduction\
Investigated the population growth of a parasite species using continuous and discrete analysis methods. System was modelled based on the given equations and solved using ODE45. A discrete analysis was carried out on a 200 by 200 grid to simulate the interactions between single agents within the system.\
\
\
Methods\
\
The simulation is carried out by iterating over each parasite agent at each time step of the simulation. An m by 3 matrix is used to store the [x, y, age] of each parasite. The parasite matrix is iterated over to move each individual parasite agent.\
The food agents are stored in a m by 2 matrix representing the [x, y] coordinates.  \
\
In order to check collisions between agents a 200 by 200 mask is created. Three values (1, 0, 0.5) are used to represent an empty space, a parasite agent and a food agent respectively. \
\
There are two functions used to set up the mask, parasite matrix and food matrix for a simulation. The first function randomly places both food and parasite agents on the grid. The second function localises the placements of food in one of four centre quadrants and randomises the parasite placements. Refer to q3/food_parasite_random_placement.m and q3/localised_food_random_placement.m for source code.\
\
There are two simulation functions for each case of food reproduction. Simulation case 1 reproduces food in neighbouring cells and simulation case 2 reproduces food at a set number and randomly on the grid. \
\
The simulation for case 1 is carried out in the following steps:\
Iterate over the parasite matrix\
	Generate a random direction and check for a collision\
\
	if Empty\
		move the parasite there\
\
	if Parasite \
		No movement\
\
	if Food\
		Add a parasite to the mask where the existing food is\
		Update the position of the parasite which has consumed the food\
		Append a new [x, y, age] row to the parasite matrix with appropriate values representing newly created parasite\
		Set the corresponding consumed food\'92s row of the food matrix to [-1 -1] (means it has been consumed)\
\
Deleting elements is inefficient in MATLAB due to static nature of arrays. Deleted values are instead set to [-1, -1]. At the end of a simulation step, the negative values of the matrix are identified with a mask. The non-negative values are copied from the original matrix to a new matrix. This is to prevent iterating over more values as food and parasites will be continually deleted from their corresponding matrices.\
\
Iterate over each food element\
	If a uniform rand number is less than specified threshold\
		place a food element in the corresponding neighbouring cell\
		depending on the rand number, the reproduced food can be N, S, E or W from the initial food location\
		add new row to food matrix\
		update mask\
\
	If a new uniform rand number is less than specified threshold\
		the food is deleted\
		the mask is updated\
\
Reallocate matrices by copying non negative rows to new matrix\
\
For simulation case 2, the food reproduction is replaced with the following steps:\
Create N food agents where N is the specified food creation number\
place the food in random x and y coordinates provided they do not collide\
Update the mask for each food element\
Append each new food row to the food matrix\
}